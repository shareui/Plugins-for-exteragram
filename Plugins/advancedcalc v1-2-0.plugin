import re
import math
from base_plugin import BasePlugin, HookResult, HookStrategy, MenuItemData, MenuItemType
from ui.settings import Header, Switch, Divider
from ui.bulletin import BulletinHelper
from client_utils import get_last_fragment
from android_utils import run_on_ui_thread, log
from com.exteragram.messenger.plugins import PluginsController
from com.exteragram.messenger.plugins.ui import PluginSettingsActivity

__id__ = "calculatoradv55"
__name__ = "Advanced calculator"
__description__ = "Продвинутый калькулятор с поддержкой +/-/:/* а так же поддержкой сложных математических функций по типу log, cos, sin, e, pi, √, ⅔ и так далее... .calc [выражение]"
__author__ = "@shrdevv"
__version__ = "1.2.0"
__min_version__ = "11.12.0"
__icon__ = "plugin232/1"


ALLOWED_NAMES = {k: v for k, v in math.__dict__.items() if not k.startswith("__")}
SAFE_EVAL_GLOBALS = {"__builtins__": None}
SAFE_EVAL_GLOBALS.update(ALLOWED_NAMES)

class CalculatorPlugin(BasePlugin):
    def on_plugin_load(self):
        self.add_on_send_message_hook()
        self.add_menu_item(
            MenuItemData(
                menu_type=MenuItemType.CHAT_ACTION_MENU,
                text="Настройки Калькулятора",
                icon="msg_settings",
                on_click=self._open_plugin_settings
            )
        )

    def _open_plugin_settings(self, context: dict):
        def action():
            try:
                java_plugin = PluginsController.getInstance().plugins.get(self.id)
                if java_plugin:
                    last_fragment = get_last_fragment()
                    if last_fragment:
                        last_fragment.presentFragment(PluginSettingsActivity(java_plugin))
            except Exception as e:
                log(f"Failed to open plugin settings: {e}")
        run_on_ui_thread(action)

    def create_settings(self):
        return [
            Header(text="Настройки калькулятора"),
            Switch(
                key="only_answer",
                text="Отправлять только ответ",
                subtext="Вместо '2+2=4' будет отправлено '4'",
                default=False
            ),
            Divider(text="Команда: .calc [выражение]. Поддерживает функции из модуля math (sin, cos, pi, e и т.д.), степени (например, 2^3 или 3⁷), корни (√9) и дроби (⅜).")
        ]

    def _preprocess_expression(self, expression):
        fraction_map = {
            '½': '(1/2)', '⅓': '(1/3)', '⅔': '(2/3)', '¼': '(1/4)', '¾': '(3/4)',
            '⅕': '(1/5)', '⅖': '(2/5)', '⅗': '(3/5)', '⅘': '(4/5)', '⅙': '(1/6)',
            '⅚': '(5/6)', '⅛': '(1/8)', '⅜': '(3/8)', '⅝': '(5/8)', '⅞': '(7/8)'
        }
        for char, value in fraction_map.items():
            expression = expression.replace(char, value)

        expression = re.sub(r'√\s*(\d+(\.\d*)?)', r'sqrt(\1)', expression)
        processed = expression.replace('^', '**')
        superscript_map = {
            '⁰': '0', '¹': '1', '²': '2', '³': '3', '⁴': '4',
            '⁵': '5', '⁶': '6', '⁷': '7', '⁸': '8', '⁹': '9'
        }
        def power_replacer(match):
            normal_power = "".join(superscript_map.get(char, '') for char in match.group(0))
            if normal_power:
                return f"**{normal_power}"
            return ""
        pattern = r'[⁰¹²³⁴⁵⁶⁷⁸⁹]+'
        return re.sub(pattern, power_replacer, processed)

    def on_send_message_hook(self, account, params):
        if not hasattr(params, "message") or not isinstance(params.message, str):
            return HookResult()

        command_prefix = ".calc "
        if not params.message.lower().startswith(command_prefix):
            return HookResult()

        expression_str = params.message[len(command_prefix):].strip()
        if not expression_str:
            BulletinHelper.show_error("Пожалуйста, введите математическое выражение после .calc")
            return HookResult(strategy=HookStrategy.CANCEL)
        
        preprocessed_str = self._preprocess_expression(expression_str)
        processed_expression = preprocessed_str.replace(':', '/').replace(',', '.')

        try:
            result = eval(processed_expression, SAFE_EVAL_GLOBALS, {})
            if isinstance(result, (float, int)):
                result = round(result, 10)
        except SyntaxError:
            BulletinHelper.show_error("Ошибка: Неверный синтаксис выражения.")
            return HookResult(strategy=HookStrategy.CANCEL)
        except NameError as e:
            name = "unknown"
            try:
                name = str(e).split("'")[1]
            except IndexError:
                pass
            BulletinHelper.show_error(f"Ошибка: Неизвестное имя '{name}'. Разрешены только математические функции и константы.")
            return HookResult(strategy=HookStrategy.CANCEL)
        except TypeError as e:
            BulletinHelper.show_error(f"Ошибка типа: {e}. Возможно, вы пытаетесь использовать неподдерживаемую операцию.")
            return HookResult(strategy=HookStrategy.CANCEL)
        except ZeroDivisionError:
            BulletinHelper.show_error("Ошибка: Деление на ноль.")
            return HookResult(strategy=HookStrategy.CANCEL)
        except Exception as e:
            BulletinHelper.show_error(f"Неизвестная ошибка: {type(e).__name__} - {e}")
            return HookResult(strategy=HookStrategy.CANCEL)

        show_only_answer = self.get_setting("only_answer", False)
        if show_only_answer:
            output_message = str(result)
        else:
            output_message = f"{expression_str} = {result}"

        params.message = output_message
        return HookResult(strategy=HookStrategy.MODIFY, params=params)